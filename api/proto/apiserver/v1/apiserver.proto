// MiniBlog API 定义，包含健康检查、用户管理和文章管理的 RPC 接口
syntax = "proto3"; // 告诉编译器此文件使用什么版本的语法

package apiserver.v1;

import "apiserver/v1/healthz.proto"; // 健康检查消息定义
// 提供用于定义 HTTP 映射的功能，比如通过 option (google.api.http) 实现 gRPC 到 HTTP 的映射
import "google/api/annotations.proto";
import "google/protobuf/empty.proto"; // 导入空消息
// 为生成 OpenAPI 文档提供相关注释（如标题、版本、作者、许可证等信息）
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/yanking/miniblog/api/gen/apiserver/v1;apiserverpb";
// OpenAPI 全局配置，提供详细配置信息，用于生成 OpenAPI 文档
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    // API名称
    title: "miniblog API"
    // API版本
    version: "1.0"
    // API 描述
    description: ""
    // 开发者的联系方式，包括项目名称、网址和电子邮件
    contact: {
      name: "小而美的博客项目"
      url: "https://github.com/onexstack/miniblog"
      email: "colin404@foxmail.com"
    }
    // 可信息和链接（这里使用 MIT License）
    license: {
      name: "MIT License"
      url: "https://github.com/onexstack/miniblog/blob/master/LICENSE"
    }
  }
  //  指定访问协议为 HTTPS
  schemes: HTTPS
  // 定义了服务的请求和响应的数据格式为 application/json
  consumes: "application/json"
  produces: "application/json"
};

// MiniBlog 定义了一个 MiniBlog RPC 服务
service MiniBlogService {
  rpc Healthz(google.protobuf.Empty) returns (HealthzResponse) {
    // 通过 google.api.http 注释，指定 HTTP 方法为 GET、URL路径为 /healthz
    option (google.api.http) = {get: "/healthz"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      // 在 OpenAPI 文档中的接口简要描述，为“服务健康检查”
      summary: "服务健康检查"
      // 标识该操作的唯一ID，为“Healthz”
      operation_id: "Healthz"
      // 将该接口归类为“服务治理”
      tags: "服务治理"
    };
  }
}
